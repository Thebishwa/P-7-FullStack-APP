{"ast":null,"code":"import _regeneratorRuntime from \"/Users/bishwapaiyar42/Downloads/oc-project-7-main/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/bishwapaiyar42/Downloads/oc-project-7-main/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport axios from 'axios';\nexport default {\n  name: \"Forum-page\",\n  data: function data() {\n    return {\n      user: null,\n      allPosts: [],\n      allLikes: [],\n      read: [],\n      comment: {\n        comText: '',\n        postId: '',\n        userId: ''\n      },\n      updateCom: '',\n      showInput: '',\n      showInputUpdate_comId: '',\n      showInputUpdate_postId: '',\n      like: {\n        postId: '',\n        userId: '',\n        liked: false\n      }\n    };\n  },\n  methods: {\n    ///////////////////////////////////////////////////////////////////////\n    // isRead - change if the user click on the section of the post\n    isRead: function isRead(postId) {\n      var url = '/post/isRead';\n      var userId = parseInt(localStorage.userId);\n      var isAlreadyRead = false;\n      this.read.forEach(function (item) {\n        if (item.postId == postId) {\n          isAlreadyRead = true;\n        }\n      });\n\n      if (isAlreadyRead == false) {\n        var isRead = true;\n        var data = {\n          userId: userId,\n          postId: postId,\n          isRead: isRead\n        };\n        this.read.push(data);\n        axios.post(url, data, {\n          headers: {\n            Authorization: 'Bearer ' + localStorage.getItem('token')\n          }\n        }).then(function (response) {\n          console.log(response);\n        }).catch(function (error) {\n          console.log(error);\n        });\n      }\n    },\n    /////////////////////////////////////////////////////////////////////\n    // user likes a post\n    likes: function likes(postId) {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var url;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this.like.postId = postId;\n                _this.like.userId = _this.user;\n\n                if (!(_this.like.liked == false)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                url = \"api/post/like/all/\".concat(postId);\n                _context.next = 6;\n                return axios.post(url, {\n                  userId: _this.like.userId\n                }, {\n                  headers: {\n                    Authorization: \"Bearer \" + localStorage.getItem(\"token\")\n                  }\n                }).then(function (response) {\n                  console.log(response);\n                  _this.like.liked = true;\n                  window.location.reload();\n                }).catch(function (error) {\n                  console.log(error);\n                  _this.like.liked = false;\n                });\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    /////////////////////////////////////////////////////////////////////\n    // user comment - delete\n    deleteComment: function deleteComment(comId) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var url;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                url = \"/api/comment/delete/\".concat(comId);\n                _context2.next = 3;\n                return axios.delete(url, {\n                  headers: {\n                    Authorization: \"Bearer \" + localStorage.getItem(\"token\")\n                  }\n                }).then(function (response) {\n                  var res = JSON.parse(response.data);\n                  console.log(res);\n                  window.location.assign(\"/home\");\n                }).catch(function (error) {\n                  return console.log(error.message);\n                });\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n    /////////////////////////////////////////////////////////////////////\n    // user comment - post\n    postComment: function postComment(postId) {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var comText, userId, data;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (_this2.comment.comText == '') {\n                  alert('Please write some text!');\n                } else {\n                  _this2.comment.postId = postId;\n                  comText = _this2.comment.comText;\n                  userId = localStorage.userId;\n                  data = {\n                    postId: postId,\n                    comText: comText,\n                    userId: userId\n                  };\n                  axios.post(\"/api/comment/create\", data, {\n                    headers: {\n                      'Content-Type': 'application/json',\n                      Authorization: 'Bearer ' + localStorage.getItem('token')\n                    }\n                  }).then(function (response) {\n                    console.log(response);\n                    window.location.reload();\n                  }).catch(function (error) {\n                    console.log(error);\n                  });\n                }\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))();\n    },\n    //////////////////////////////////////////////////////////////////////////////////////////\n    //update user - axios put\n    updateComment: function updateComment(comId) {\n      var _this3 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var userId, url, updateComment;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                userId = localStorage.userId;\n                url = \"/api/comment/update/\".concat(comId);\n                updateComment = {\n                  comText: _this3.updateCom,\n                  userId: userId,\n                  comId: comId\n                };\n                _context4.next = 5;\n                return axios.put(url, updateComment, {\n                  headers: {\n                    'Content-Type': 'application/json',\n                    Authorization: \"Bearer \" + localStorage.getItem(\"token\")\n                  }\n                }).then(function (response) {\n                  var res = response.data;\n                  console.log(res);\n                  window.location.assign(\"/home\");\n                }).catch(function (error) {\n                  alert(error.message);\n                });\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }))();\n    },\n    /////////////////////////////////////////////////////////////////////\n    // toggle comment input\n    toggleInput: function toggleInput(postId) {\n      if (this.showInput != postId) {\n        this.showInput = postId;\n      } else {\n        this.showInput = '';\n      }\n    },\n    /////////////////////////////////////////////////////////////////////\n    // toggle comment update input \n    toggleInputUpdate: function toggleInputUpdate(comId, postId) {\n      // this.showInputUpdate = !this.showInputUpdate\n      console.log(comId, postId);\n\n      if (this.showInputUpdate_comId != comId || this.showInputUpdate_postId != postId) {\n        this.showInputUpdate_comId = comId;\n        this.showInputUpdate_postId = postId;\n      } else {\n        this.showInputUpdate_comId = '';\n        this.showInputUpdate_postId = '';\n      }\n    },\n    /////////////////////////////////////////////////////////////////////\n    // reset comment input\n    resetComment: function resetComment() {\n      this.comment.comText = '';\n    },\n    /////////////////////////////////////////////////////////////////////\n    // reset comment input update\n    resetCommentUpdate: function resetCommentUpdate() {\n      this.updateCom = '';\n    },\n    /////////////////////////////////////////////////////////////////////\n    // get all post and comment if user press button 'All posts' on navbar\n    getPosts: function getPosts() {\n      var _this4 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var url;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                url = \"/post/all/\";\n                _context5.next = 3;\n                return axios.get(url, {\n                  headers: {\n                    Authorization: \"Bearer \" + localStorage.getItem(\"token\")\n                  }\n                }).then(function (response) {\n                  var posts = response.data;\n                  _this4.allPosts = posts;\n                }).catch(function (error) {\n                  console.log(error);\n                });\n\n              case 3:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }))();\n    },\n    /////////////////////////////////////////////////////////////////////\n    // get all posts by author if user press button 'My posts' on navbar\n    myPosts: function myPosts() {\n      var _this5 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var user, url;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                user = localStorage.userId;\n                url = \"/post/all/\".concat(user);\n                _context6.next = 4;\n                return axios.get(url, {\n                  headers: {\n                    Authorization: \"Bearer \" + localStorage.getItem(\"token\")\n                  }\n                }).then(function (response) {\n                  var posts = response.data;\n                  _this5.allPosts = posts;\n                }).catch(function (error) {\n                  console.log(error);\n                });\n\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }))();\n    },\n    /////////////////////////////////////////////////////////////////////\n    newPost: function newPost() {\n      this.$router.push(\"home/create\");\n    },\n    /////////////////////////////////////////////////////////////////////\n    newPostUpdate: function newPostUpdate(postId) {\n      console.log(postId);\n      localStorage.setItem(\"postUpdate\", postId);\n      this.$router.push(\"home/create\");\n    },\n    /////////////////////////////////////////////////////////////////////\n    // delete post\n    deletePost: function deletePost(postId) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var url;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                url = \"/post/all/\".concat(postId);\n                _context7.next = 3;\n                return axios.delete(url, {\n                  headers: {\n                    Authorization: \"Bearer \" + localStorage.getItem(\"token\")\n                  }\n                }).then(function (response) {\n                  var res = JSON.parse(response.data);\n                  console.log(res);\n                  window.location.assign(\"/home\");\n                }).catch(function (error) {\n                  return console.log(error.message);\n                });\n\n              case 3:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }))();\n    } /////////////////////////////////////////////////////////////////////\n\n  },\n  mounted: function mounted() {\n    var _this6 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n      var userId;\n      return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return axios.get(\"/post/all\", {\n                headers: {\n                  Authorization: \"Bearer \" + localStorage.getItem(\"token\")\n                }\n              }).then(function (response) {\n                var posts = response.data;\n                _this6.allPosts = posts;\n              }).catch(function (error) {\n                return console.log(error);\n              });\n\n            case 2:\n              // user logged - store userId in LocalStorage\n              _this6.user = localStorage.getItem(\"userId\"); /////////////////////////////////////////////////////////////////////\n              // get all likes - counter\n\n              _context8.next = 5;\n              return axios.get(\"api/post/like/all\", {\n                headers: {\n                  Authorization: \"Bearer \" + localStorage.getItem(\"token\")\n                }\n              }).then(function (response) {\n                var likes = response.data;\n                _this6.allLikes = likes;\n              }).catch(function (error) {\n                return console.log(error);\n              });\n\n            case 5:\n              /////////////////////////////////////////////////////////////////////\n              // isRead\n              userId = _this6.user;\n              _context8.next = 8;\n              return axios.get(\"post/status/isRead/\".concat(userId), {\n                headers: {\n                  Authorization: \"Bearer \" + localStorage.getItem(\"token\")\n                }\n              }).then(function (response) {\n                var read = response.data;\n                _this6.read = read;\n\n                if (read.length > 0) {\n                  _this6.readEmpty = false;\n                } else {\n                  _this6.readEmpty = true;\n                }\n              }).catch(function (error) {\n                return console.log(error);\n              });\n\n            case 8:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }))();\n  }\n};","map":{"version":3,"mappings":"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","names":["name","data","user","allPosts","allLikes","read","comment","comText","postId","userId","updateCom","showInput","showInputUpdate_comId","showInputUpdate_postId","like","liked","methods","isRead","isAlreadyRead","axios","headers","Authorization","then","console","catch","likes","url","window","deleteComment","comId","postComment","alert","localStorage","updateComment","toggleInput","toggleInputUpdate","resetComment","resetCommentUpdate","getPosts","myPosts","newPost","newPostUpdate","deletePost","mounted"],"sourceRoot":"src/components","sources":["Forum.vue"],"sourcesContent":["<template>\n  <article>\n    <section v-if=\"user\" class=\"sticky\">\n      <div class=\"create-post-form\">\n        <div class=\"profile-img\">\n          <img src=\"../images/default_user_icon.jpg\">\n        </div>\n        <div class=\"nav-user\">\n          <button @click=\"newPost\">Create post</button>\n          <button @click=\"getPosts()\">All posts</button>\n          <button @click=\"myPosts()\">My posts</button>\n        </div>\n      </div>\n    </section>\n    <section v-for=\"(post, index) in allPosts\" :key=\"index\" @click=\"isRead(post.post_id)\">\n      <div class=\"post\">\n        <div class=\"post_user\">\n          <div class=\"profile-img-post\">\n            <img src=\"../images/default_user_icon.jpg\">\n          </div>\n          <div>\n            <div class=\"profile-name\">by {{ post.User.firstName }} {{ post.User.lastName }}</div>\n            <div class=\"profile-name\">at {{ post.date }}</div>\n          </div>\n        </div>\n    \n        <!-- post read/unread toggle -->\n        <div class=\"read\" v-if=\"read.find(x => {if(x.userId == user && x.postId == post.post_id && x.isRead == true){ return true; } return false;})\">Read</div>\n        <div class=\"unread\" v-else>Unread</div>\n\n        <!-- post content -->\n          <!-- text -->\n        <div class=\"post_content\">{{ post.postText }}</div>\n          <!-- image -->\n        <div v-if=\"post.imageUrl != null\" class=\"post_content\"><img :src=\"post.imageUrl\"></div>\n        <!-- like counter-->\n        <div v-for=\"(like, index) in allLikes\" :key=\"index\">\n          <div class=\"like\" v-if=\"post.post_id == like.postId\">{{ like.n_like }} people like this post</div>\n        </div>\n        <!-- post buttons -->\n        <div class=\"post_buttons\">\n          <button @click=\"toggleInput(post.post_id)\">Comment</button>\n            <button @click=\"likes(post.post_id)\">Like</button>\n          <button v-if=\"post.userId == user\" @click=\"newPostUpdate(post.post_id)\" >\n            Update</button>\n          <button v-if=\"post.userId == user\" id=\"delete-button\" @click=\"deletePost(post.post_id)\">\n            Delete</button>\n        </div> \n      </div>\n      <!-- comment input -->\n        <div class=\"commentInput\" v-if=\"showInput == post.post_id\">\n          <textarea placeholder=\"Write some text...\" v-model=\"comment.comText\"></textarea>\n          <button @click=\"postComment(post.post_id)\">Post</button>\n          <button @click=\"resetComment()\">Reset</button>\n        </div>  \n      <!-- </div> -->\n      <!-- comments -->\n      <div class=\"comments\" v-for=\"(comment, index) in post.Comments\" :key=\"index\">\n          <div class=\"post_user\">\n            <div class=\"profile-img-post\">\n              <img src=\"../images/default_user_icon.jpg\">\n            </div>\n            <div>\n              <div class=\"profile-name\">by {{ comment.User.firstName }} {{ comment.User.lastName }}</div>\n              <div class=\"profile-name\">at {{ comment.comCreatedAt }}</div>\n            </div>\n          </div>\n          \n          <div class=\"comment-content\">{{ comment.comText }}</div>\n          <div class=\"post_buttons\">\n            <button v-if=\"comment.userId == user\" @click=\"toggleInputUpdate(comment.id, post.post_id)\">\n              Update</button>\n            <button v-if=\"comment.userId == user\" id=\"delete-button\" @click=\"deleteComment(comment.id)\">\n              Delete</button>\n          </div>\n          <!-- comment input update-->\n          <div class=\"commentInputUpdate\" v-if=\"showInputUpdate_comId == comment.id && showInputUpdate_postId == post.post_id\">\n            <textarea placeholder=\"Write some text...\" v-model=\"updateCom\"></textarea>\n            <button @click=\"updateComment(comment.id)\">Update</button>\n            <button @click=\"resetCommentUpdate(comment.id)\">Reset</button>\n          </div>\n      </div>\n\n    </section>\n  </article>\n</template>\n\n\n<script>\n  import axios from 'axios';\n\n  export default {\n    name: \"Forum-page\",\n    data() {\n      return {\n        user: null,\n        allPosts: [],\n        allLikes: [],\n        read:[],\n        comment: {\n          comText:'',\n          postId:'',\n          userId:'',\n        },\n        updateCom:'',\n        showInput: '',\n        showInputUpdate_comId:'',\n        showInputUpdate_postId:'',\n        like:{\n          postId:'',\n          userId:'',\n          liked: false\n        },\n      };\n    },\n\n    methods: {\n      ///////////////////////////////////////////////////////////////////////\n      // isRead - change if the user click on the section of the post\n      isRead(postId){\n        const url = '/post/isRead'\n        const userId = parseInt(localStorage.userId)\n        let isAlreadyRead = false\n        \n        this.read.forEach((item) => {\n          if (item.postId == postId){\n            isAlreadyRead = true \n          }\n        })\n        if (isAlreadyRead == false){\n        let isRead = true\n        const data = { userId, postId, isRead }\n        this.read.push(data)\n\n        axios.post( url, data, {\n          headers : {\n            Authorization: 'Bearer ' + localStorage.getItem('token')\n          }\n          })\n          .then(response => {\n            console.log(response);\n          })\n          .catch(error => {\n            console.log(error);\n          })\n        }\n      },\n      /////////////////////////////////////////////////////////////////////\n      // user likes a post\n      async likes(postId) {\n        this.like.postId = postId;\n        this.like.userId = this.user;\n        if(this.like.liked == false ){\n        const url = `api/post/like/all/${postId}`;\n        await axios.post(url, {\n          userId: this.like.userId,\n        }, \n        { headers: {\n          Authorization: \"Bearer \" + localStorage.getItem(\"token\")}\n        }).then(response => {\n          console.log(response);\n          this.like.liked = true;\n          window.location.reload();\n        }).catch(error => {\n          console.log(error);\n          this.like.liked = false;\n        });\n        }\n      },\n      /////////////////////////////////////////////////////////////////////\n      // user comment - delete\n      async deleteComment(comId){\n        const url = `/api/comment/delete/${comId}`;\n          await axios.delete(url, {\n            headers: { Authorization: \"Bearer \" + localStorage.getItem(\"token\") }\n          }).then((response) => {\n            let res = JSON.parse(response.data);\n            console.log(res);\n            window.location.assign(\"/home\");\n          }).catch((error) => console.log(error.message));\n      },\n      /////////////////////////////////////////////////////////////////////\n      // user comment - post\n      async postComment(postId) {\n        if (this.comment.comText == '') {\n          alert('Please write some text!')\n        } else {\n          this.comment.postId = postId\n          let comText = this.comment.comText\n          let userId = localStorage.userId\n          let data = { postId, comText, userId }\n\n          axios.post(`/api/comment/create`, data,{\n            headers : {\n              'Content-Type': 'application/json',\n              Authorization: 'Bearer ' + localStorage.getItem('token')\n            }\n          })\n          .then(response => {\n            console.log(response);\n            window.location.reload();\n          })\n          .catch(error => {\n            console.log(error);\n          });\n        }\n      },\n      //////////////////////////////////////////////////////////////////////////////////////////\n      //update user - axios put\n      async updateComment(comId){\n        const userId = localStorage.userId\n        const url = `/api/comment/update/${comId}`\n        const updateComment = { \n          comText: this.updateCom,\n          userId: userId,\n          comId: comId\n        }\n        await axios.put(url, updateComment, {\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: \"Bearer \" + localStorage.getItem(\"token\")\n          }\n        })\n        .then((response) => {\n          const res = response.data;\n          console.log(res);\n          window.location.assign(\"/home\");\n        })\n        .catch((error) => {\n          alert(error.message)\n        });\n        \n      },\n\n      /////////////////////////////////////////////////////////////////////\n      // toggle comment input\n        toggleInput(postId) {\n          if (this.showInput != postId){\n            this.showInput = postId\n          } else {\n            this.showInput = ''\n          }\n        },\n      /////////////////////////////////////////////////////////////////////\n      // toggle comment update input \n        toggleInputUpdate(comId, postId) {\n        // this.showInputUpdate = !this.showInputUpdate\n        console.log(comId, postId)\n        if (this.showInputUpdate_comId != comId || this.showInputUpdate_postId != postId ){\n          this.showInputUpdate_comId = comId\n          this.showInputUpdate_postId = postId\n        } else {\n          this.showInputUpdate_comId = ''\n          this.showInputUpdate_postId = ''\n        }\n        },\n      /////////////////////////////////////////////////////////////////////\n      // reset comment input\n        resetComment() {\n          this.comment.comText = ''\n        },\n      /////////////////////////////////////////////////////////////////////\n      // reset comment input update\n        resetCommentUpdate() {\n          this.updateCom = ''\n        },\n        /////////////////////////////////////////////////////////////////////\n        // get all post and comment if user press button 'All posts' on navbar\n        async getPosts() {\n            const url = `/post/all/`;\n            await axios.get(url, {\n              headers: {\n                Authorization: \"Bearer \" + localStorage.getItem(\"token\")\n              }\n            }).then(response => {\n                let posts = response.data;\n                this.allPosts = posts;\n            }).catch(error => { console.log(error) });\n        },\n        /////////////////////////////////////////////////////////////////////\n        // get all posts by author if user press button 'My posts' on navbar\n        async myPosts() {\n            const user = localStorage.userId\n            const url = `/post/all/${user}`;\n            await axios.get(url, {\n                headers: {\n                    Authorization: \"Bearer \" + localStorage.getItem(\"token\")\n                }\n            }).then(response => {\n                let posts = response.data;\n                this.allPosts = posts;\n            }).catch(error => { console.log(error)});\n        },\n        /////////////////////////////////////////////////////////////////////\n        newPost() {\n            this.$router.push(\"home/create\");\n        },\n         /////////////////////////////////////////////////////////////////////\n        newPostUpdate(postId) {\n          console.log(postId)\n          localStorage.setItem(\"postUpdate\", postId)\n          this.$router.push(\"home/create\");\n        },\n        /////////////////////////////////////////////////////////////////////\n        // delete post\n        async deletePost(postId) {\n          const url = `/post/all/${postId}`;\n          await axios.delete(url, {\n            headers: { Authorization: \"Bearer \" + localStorage.getItem(\"token\") }\n          }).then((response) => {\n            let res = JSON.parse(response.data);\n            console.log(res);\n            window.location.assign(\"/home\");\n          }).catch((error) => console.log(error.message));\n        },\n        /////////////////////////////////////////////////////////////////////\n    },\n    async mounted() {\n      /////////////////////////////////////////////////////////////////////\n      //get all posts and comments from the DB\n      await axios.get(\"/post/all\", {\n        headers: {\n          Authorization: \"Bearer \" + localStorage.getItem(\"token\")\n          }\n      }).then(response => {\n        let posts = response.data;\n        this.allPosts = posts;\n      }).catch(error => (console.log(error)));\n      // user logged - store userId in LocalStorage\n      this.user = localStorage.getItem(\"userId\");\n\n      /////////////////////////////////////////////////////////////////////\n      // get all likes - counter\n      await axios.get(\"api/post/like/all\", {\n        headers: {\n          Authorization: \"Bearer \" + localStorage.getItem(\"token\")\n        }\n      }).then(response => {\n        let likes = response.data;\n        this.allLikes = likes;\n      }).catch(error => (console.log(error)));\n\n      /////////////////////////////////////////////////////////////////////\n      // isRead\n      const userId = this.user\n      await axios.get(`post/status/isRead/${userId}`, {\n        headers: {\n          Authorization: \"Bearer \" + localStorage.getItem(\"token\")\n        }\n      }).then(response => {\n        let read = response.data;\n        this.read = read;\n        if (read.length > 0) {\n          this.readEmpty = false\n        } else {\n          this.readEmpty = true\n        }\n      }).catch(error => (console.log(error)));\n    },\n};\n</script>\n\n<style>\n\n.unread {\n  padding-left:5px;\n  font-size: large;\n  border: 2px solid rgb(203, 7, 7);\n  color: rgb(203, 7, 7);\n  width: 65px;\n  font-style: italic;\n}\n\n.read {\n  padding-left:5px;\n  font-size: large;\n  border: 2px solid grey;\n  color:grey;\n  width: 45px;\n  font-style: italic;\n}\n\n.like {\n  font-weight: lighter;\n  font-size: large;\n  font-style: italic;\n  display:flex;\n  justify-content: flex-end;\n  padding-right: 15px;\n}\n\n.commentInput {\n  width: 51%;\n  min-height: 80px;\n  margin:auto;\n  margin-top:20px;\n  border-radius: 10px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.26);\n  padding:10px;\n  max-width: 1200px;\n}\n\n.commentInputUpdate{\n  width: 95%;\n  min-height: 80px;\n  margin:auto;\n  margin-top:20px;\n  border-radius: 10px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.26);\n  padding:10px;\n  max-width: 1200px;\n}\n.comments {\n  min-height: 80px;\n  width: 50%;\n  margin:auto;\n  margin-top:20px;\n  border-radius: 10px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.26);\n  padding:15px;\n  max-width: 1200px;\n}\n\n.comment-content {\n  min-height:50px;\n  padding:10px;\n  font-weight: lighter;\n  font-size: large;\n}\n\n.sticky {\n  position: sticky;\n  top: 65px;\n}\n\n.create-post-form {\n  min-height: 80px;\n  width: 80%;\n  margin:auto;\n  display:flex;\n  border-radius: 10px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.26);\n  background-color: #333;\n  padding:10px;\n  max-width: 1200px;\n}\n\n.create-post-form button {\n  margin-left: 10px;\n  margin-right: 10px;\n  width: 200px;\n  height: 40px;\n  border: 2px solid white;\n  color: white;\n  border-radius: 10px;\n  font-size:large;\n  font-weight: lighter;\n}\n\n.create-post-form button:active {\n  background:rgb(1, 49, 1);\n  opacity: 0.95;\n}\n\n.profile-img {\n  \n  height: 60px;\n  width: 60px;\n  margin:auto\n}\n\n.profile-img img {\n  height: 60px;\n  object-fit: contain\n}\n\n.profile-img-post img {\n  height: 40px;\n  object-fit: contain\n}\n\n.nav-user{\n  min-height: 40px;\n  width: 85%;\n  margin: 20px;\n  display: flex;\n  justify-content: space-between;\n}\n\nbutton {\n  margin-right: 10px;\n  width: 100px;\n  height: 40px;\n  border: 2px solid white;\n  background: #333;\n  color: white;\n  border-radius: 10px;\n  font-size:large;\n  font-weight: lighter;\n}\n\nbutton:hover{\n  border-color: aqua;\n  transition: 0.9s;\n}\n\n.post {\n  border-radius: 10px;\n  margin:auto;\n  min-height: 220px;\n  width: 75%;\n  padding: 15px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.26);\n}\n\n.post_user {\n  border-radius: 10px;\n  margin:auto;\n  min-height: 60px;\n  display:flex;\n  justify-content: space-between;\n  overflow: hidden;\n  font-style: italic;\n}\n\n.post_user .profile-img-post {\n  height: 40px;\n  min-width: 40px;\n  margin-left: 10px;\n  margin-top:10px\n\n}\n\n.profile-name {\n  height: 28px;\n  min-width: 170px;\n  margin:auto;\n  margin-left:10px;\n  margin-right:10px;\n  font-size:large;\n  font-weight: lighter;\n}\n\n.post_content {\n  border-radius: 10px;\n  margin:auto;\n  min-height: 40px;\n  padding:10px;\n  overflow-wrap: break-word;\n  font-size:large;\n  font-weight: lighter;\n  text-align: justify;\n}\n\n.post_content img{\n  max-width: 100%;\n  height: auto;\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.post_buttons{\n  display:flex;\n  justify-content: center;\n  border-radius: 10px;\n  margin:auto;\n  min-height: 30px;\n  padding:10px\n}\n\nbutton:hover {\n  border-color: #333;\n  transition: 0.8s;\n  background-color: green;\n}\n\n#delete-button{\n  background: #333;\n}\n\n#delete-button:hover{\n  background: rgb(232, 3, 3);\n  border-color: #333;\n  transition: 0.4s;\n  font-weight:bold;\n}\n\n@media only screen and (max-width: 1252px) {\n  button {\n    margin-top:10px\n  }\n}\n\n@media only screen and (max-width: 768px) {\n  .post_buttons {\n    display:block;\n  }\n  \n}\n\n@media only screen and (max-width: 660px) {\n  .create-post-form {\n    text-align: center\n  }\n  .nav-user{\n    display: block;\n  }\n}\n\n@media only screen and (max-width: 487px) {\n  \n  .nav-user {\n    width: 100%;\n    display:flex;\n    margin:0;\n  }\n  .profile-img {\n    display:none;\n  }\n  .create-post-form {\n    width: 95%;\n    min-height: 60px;\n    justify-content: center;\n  }\n  .post{\n    width: 85%;\n  }\n  .commentInput{\n    width: 67%;\n  }\n  .comments{\n    width: 65%;\n  }\n}\n\n@media only screen and (max-width: 380px) {\n .sticky{\n  top:55px;\n }\n}\n   \n</style>\n"]},"metadata":{},"sourceType":"module"}